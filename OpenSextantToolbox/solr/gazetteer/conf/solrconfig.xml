<?xml version="1.0" encoding="UTF-8" ?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<!-- For more details about configurations options that may appear in this 
	file, see http://wiki.apache.org/solr/SolrConfigXml. -->
<config>
	<!-- In all configuration below, a prefix of "solr." for class names is 
		an alias that causes solr to search appropriate packages, including org.apache.solr.(search|update|request|core|analysis) 
		You may also specify a fully qualified Java classname if you have your own 
		custom plugins. -->

	<!-- Controls what version of Lucene various components of Solr adhere to. 
		Generally, you want to use the latest version to get all bug fixes and improvements. 
		It is highly recommended that you fully re-index after changing this setting 
		as it can affect both how text is indexed and queried. -->
	<luceneMatchVersion>LUCENE_43</luceneMatchVersion>

	<!-- Data Directory Used to specify an alternate directory to hold all index 
		data other than the default ./data under the Solr home. If replication is 
		in use, this should match the replication configuration. -->
	<dataDir>${solr.data.dir:}</dataDir>


	<!-- The DirectoryFactory to use for indexes. solr.StandardDirectoryFactory 
		is filesystem based and tries to pick the best implementation for the current 
		JVM and platform. solr.NRTCachingDirectoryFactory, the default, wraps solr.StandardDirectoryFactory 
		and caches small files in memory for better NRT performance. One can force 
		a particular implementation via solr.MMapDirectoryFactory, solr.NIOFSDirectoryFactory, 
		or solr.SimpleFSDirectoryFactory. solr.RAMDirectoryFactory is memory based, 
		not persistent, and doesn't work with replication. -->
	<directoryFactory name="DirectoryFactory"
		class="${solr.directoryFactory:solr.StandardDirectoryFactory}" />

	<codecFactory name="CodecFactory" class="solr.SchemaCodecFactory" /> 

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		Index Config - These settings control low-level behavior of indexing Most 
		example settings here show the default value, but are commented out, to more 
		easily see where customizations have been made. Note: This replaces <indexDefaults> 
		and <mainIndex> from older versions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<indexConfig>

	</indexConfig>

	<!-- The default high-performance update handler -->
	<updateHandler class="solr.DirectUpdateHandler2">

	</updateHandler>

	<query>
		<!-- Max Boolean Clauses Maximum number of clauses in each BooleanQuery, 
			an exception is thrown if exceeded. ** WARNING ** This option actually modifies 
			a global Lucene property that will affect all SolrCores. If multiple solrconfig.xml 
			files disagree on this property, the value at any given moment will be based 
			on the last SolrCore to be initialized. -->
		<maxBooleanClauses>5000</maxBooleanClauses>


		<!-- Solr Internal Query Caches There are two implementations of cache 
			available for Solr, LRUCache, based on a synchronized LinkedHashMap, and 
			FastLRUCache, based on a ConcurrentHashMap. FastLRUCache has faster gets 
			and slower puts in single threaded operation and thus is generally faster 
			than LRUCache when the hit ratio of the cache is high (> 75%), and may be 
			faster under other scenarios on multi-cpu systems. -->

		<!-- Filter Cache Cache used by SolrIndexSearcher for filters (DocSets), 
			unordered sets of *all* documents that match a query. When a new searcher 
			is opened, its caches may be prepopulated or "autowarmed" using data from 
			caches in the old searcher. autowarmCount is the number of items to prepopulate. 
			For LRUCache, the autowarmed items will be the most recently accessed items. 
			Parameters: class - the SolrCache implementation LRUCache or (LRUCache or 
			FastLRUCache) size - the maximum number of entries in the cache initialSize 
			- the initial capacity (number of entries) of the cache. (see java.util.HashMap) 
			autowarmCount - the number of entries to prepopulate from and old cache. -->
		<filterCache class="solr.FastLRUCache" size="512"
			initialSize="512" autowarmCount="0" />

		<!-- Query Result Cache Caches results of searches - ordered lists of document 
			ids (DocList) based on a query, a sort, and the range of documents requested. -->
		<queryResultCache class="solr.LRUCache" size="512"
			initialSize="512" autowarmCount="0" />

		<!-- Document Cache Caches Lucene Document objects (the stored fields for 
			each document). Since Lucene internal document ids are transient, this cache 
			will not be autowarmed. -->
		<!-- LFU cache is probably better, and use a big cache for tagging -->
		<!-- OPENSEXTANT NOT helpful for tagger <documentCache class="solr.LFUCache" 
			size="0" initialSize="512" autowarmCount="0"/> -->

		<!-- Field Value Cache Cache used to hold field values that are quickly 
			accessible by document id. The fieldValueCache is created by default even 
			if not configured here. -->
		<!-- <fieldValueCache class="solr.FastLRUCache" size="512" autowarmCount="128" 
			showItems="32" /> -->

		<!-- Custom Cache Example of a generic cache. These caches may be accessed 
			by name through SolrIndexSearcher.getCache(),cacheLookup(), and cacheInsert(). 
			The purpose is to enable easy caching of user/application level data. The 
			regenerator argument should be specified as an implementation of solr.CacheRegenerator 
			if autowarming is desired. -->
		<!-- <cache name="myUserCache" class="solr.LRUCache" size="4096" initialSize="1024" 
			autowarmCount="1024" regenerator="com.mycompany.MyRegenerator" /> -->


		<!-- Lazy Field Loading If true, stored fields that are not requested will 
			be loaded lazily. This can result in a significant speed improvement if the 
			usual case is to not load all stored fields, especially if the skipped fields 
			are large compressed text fields. -->
		<!-- OPENSEXTANT false since we need nearly all -->
		<enableLazyFieldLoading>false</enableLazyFieldLoading>

		<!-- Use Filter For Sorted Query A possible optimization that attempts 
			to use a filter to satisfy a search. If the requested sort does not include 
			score, then the filterCache will be checked for a filter matching the query. 
			If found, the filter will be used as the source of document ids, and then 
			the sort will be applied to that. For most situations, this will not be useful 
			unless you frequently get the same search repeatedly with different sort 
			options, and none of them ever use "score" -->
		<!-- <useFilterForSortedQuery>true</useFilterForSortedQuery> -->

		<!-- Result Window Size An optimization for use with the queryResultCache. 
			When a search is requested, a superset of the requested number of document 
			ids are collected. For example, if a search for a particular query requests 
			matching documents 10 through 19, and queryWindowSize is 50, then documents 
			0 through 49 will be collected and cached. Any further requests in that range 
			can be satisfied via the cache. -->
		<queryResultWindowSize>20</queryResultWindowSize>

		<!-- Maximum number of documents to cache for any entry in the queryResultCache. -->
		<queryResultMaxDocsCached>200</queryResultMaxDocsCached>

		<!-- Query Related Event Listeners Various IndexSearcher related events 
			can trigger Listeners to take actions. newSearcher - fired whenever a new 
			searcher is being prepared and there is a current searcher handling requests 
			(aka registered). It can be used to prime certain caches to prevent long 
			request times for certain requests. firstSearcher - fired whenever a new 
			searcher is being prepared but there is no current registered searcher to 
			handle requests or to gain autowarming data from. -->
		<!-- QuerySenderListener takes an array of NamedList and executes a local 
			query request for each NamedList in sequence. -->
		<listener event="newSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<!-- <lst><str name="q">solr</str><str name="sort">price asc</str></lst> 
					<lst><str name="q">rocks</str><str name="sort">weight asc</str></lst> -->
			</arr>
		</listener>
		<listener event="firstSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<lst>
					<str name="q">static firstSearcher warming in solrconfig.xml</str>
				</lst>
			</arr>
		</listener>

		<!-- Use Cold Searcher If a search request comes in and there is no current 
			registered searcher, then immediately register the still warming searcher 
			and use it. If "false" then all requests will block until the first searcher 
			is done warming. -->
		<useColdSearcher>false</useColdSearcher>

		<!-- Max Warming Searchers Maximum number of searchers that may be warming 
			in the background concurrently. An error is returned if this limit is exceeded. 
			Recommend values of 1-2 for read-only slaves, higher for masters w/o cache 
			warming. -->
		<maxWarmingSearchers>2</maxWarmingSearchers>

	</query>


	<!-- Request Dispatcher This section contains instructions for how the SolrDispatchFilter 
		should behave when processing requests for this SolrCore. handleSelect is 
		a legacy option that affects the behavior of requests such as /select?qt=XXX 
		handleSelect="true" will cause the SolrDispatchFilter to process the request 
		and dispatch the query to a handler specified by the "qt" param, assuming 
		"/select" isn't already registered. handleSelect="false" will cause the SolrDispatchFilter 
		to ignore "/select" requests, resulting in a 404 unless a handler is explicitly 
		registered with the name "/select" handleSelect="true" is not recommended 
		for new users, but is the default for backwards compatibility -->
	<requestDispatcher handleSelect="false">
		<!-- Request Parsing These settings indicate how Solr Requests may be parsed, 
			and what restrictions may be placed on the ContentStreams from those requests 
			enableRemoteStreaming - enables use of the stream.file and stream.url parameters 
			for specifying remote streams. multipartUploadLimitInKB - specifies the max 
			size of Multipart File Uploads that Solr will allow in a Request. *** WARNING 
			*** The settings below authorize Solr to fetch remote files, You should make 
			sure your system has some authentication before using enableRemoteStreaming="true" -->
		<requestParsers enableRemoteStreaming="true"
			multipartUploadLimitInKB="2048000" />

		<!-- HTTP Caching Set HTTP caching related parameters (for proxy caches 
			and clients). The options below instruct Solr not to output any HTTP Caching 
			related headers -->
		<httpCaching never304="true" />
		<!-- If you include a <cacheControl> directive, it will be used to generate 
			a Cache-Control header (as well as an Expires header if the value contains 
			"max-age=") By default, no Cache-Control header is generated. You can use 
			the <cacheControl> option even if you have set never304="true" -->
		<!-- <httpCaching never304="true" > <cacheControl>max-age=30, public</cacheControl> 
			</httpCaching> -->
		<!-- To enable Solr to respond with automatically generated HTTP Caching 
			headers, and to response to Cache Validation requests correctly, set the 
			value of never304="false" This will cause Solr to generate Last-Modified 
			and ETag headers based on the properties of the Index. The following options 
			can also be specified to affect the values of these headers... lastModFrom 
			- the default value is "openTime" which means the Last-Modified value (and 
			validation against If-Modified-Since requests) will all be relative to when 
			the current Searcher was opened. You can change it to lastModFrom="dirLastMod" 
			if you want the value to exactly correspond to when the physical index was 
			last modified. etagSeed="..." is an option you can change to force the ETag 
			header (and validation against If-None-Match requests) to be different even 
			if the index has not changed (ie: when making significant changes to your 
			config file) (lastModifiedFrom and etagSeed are both ignored if you use the 
			never304="true" option) -->
		<!-- <httpCaching lastModifiedFrom="openTime" etagSeed="Solr"> <cacheControl>max-age=30, 
			public</cacheControl> </httpCaching> -->
	</requestDispatcher>

	<!-- Request Handlers http://wiki.apache.org/solr/SolrRequestHandler Incoming 
		queries will be dispatched to a specific handler by name based on the path 
		specified in the request. Legacy behavior: If the request path uses "/select" 
		but no Request Handler has that name, and if handleSelect="true" has been 
		specified in the requestDispatcher, then the Request Handler is dispatched 
		based on the qt parameter. Handlers without a leading '/' are accessed this 
		way like so: http://host/app/[core/]select?qt=name If no qt is given, then 
		the requestHandler that declares default="true" will be used or the one named 
		"standard". If a Request Handler is declared with startup="lazy", then it 
		will not be initialized until the first request that uses it. -->
	<!-- SearchHandler http://wiki.apache.org/solr/SearchHandler For processing 
		Search Queries, the primary Request Handler provided with Solr is "SearchHandler" 
		It delegates to a sequent of SearchComponents (see below) and supports distributed 
		queries across multiple shards -->
	<requestHandler name="/select" class="solr.SearchHandler">
		<!-- default values for query parameters can be specified, these will be 
			overridden by parameters in the request -->
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<int name="rows">100</int>
			<str name="df">name</str>
		</lst>
		<!-- In addition to defaults, "appends" params can be specified to identify 
			values which should be appended to the list of multi-val params from the 
			query (or the existing "defaults"). -->
		<!-- In this example, the param "fq=instock:true" would be appended to 
			any query time fq params the user may specify, as a mechanism for partitioning 
			the index, independent of any user selected filtering that may also be desired 
			(perhaps as a result of faceted searching). NOTE: there is *absolutely* nothing 
			a client can do to prevent these "appends" values from being used, so don't 
			use this mechanism unless you are sure you always want it. -->
		<!-- <lst name="appends"> <str name="fq">inStock:true</str> </lst> -->
		<!-- "invariants" are a way of letting the Solr maintainer lock down the 
			options available to Solr clients. Any params values specified here are used 
			regardless of what values may be specified in either the query, the "defaults", 
			or the "appends" params. In this example, the facet.field and facet.query 
			params would be fixed, limiting the facets clients can use. Faceting is not 
			turned on by default - but if the client does specify facet=true in the request, 
			these are the only facets they will be able to see counts for; regardless 
			of what other facet.field or facet.query params they may specify. NOTE: there 
			is *absolutely* nothing a client can do to prevent these "invariants" values 
			from being used, so don't use this mechanism unless you are sure you always 
			want it. -->
		<!-- <lst name="invariants"> <str name="facet.field">cat</str> <str name="facet.field">manu_exact</str> 
			<str name="facet.query">price:[* TO 500]</str> <str name="facet.query">price:[500 
			TO *]</str> </lst> -->
		<!-- If the default list of SearchComponents is not desired, that list 
			can either be overridden completely, or components can be prepended or appended 
			to the default list. (see below) -->
		<!-- <arr name="components"> <str>nameOfCustomComponent1</str> <str>nameOfCustomComponent2</str> 
			</arr> -->
	</requestHandler>

	<!-- OPENSEXTANT handler used for matching -->
	<!--  
	<requestHandler name="/tag"
		class="org.opensextant.solrtexttagger.TaggerRequestHandler">
		<str name="indexedField">name</str>
		<str name="storedField">name</str>
		<bool name="partialMatches">false</bool>
		<bool name="matchText">false</bool>
		<str name="cacheFile">taggerCache.fst</str>
		<int name="valueMinLen">1</int>
		<int name="valueMaxLen">100</int>
		<str name="fq">name_bias:[0 TO *]</str>
		<lst name="defaults">
			<str name="echoParams">none</str>
			<str name="fl">place_id,name</str>
		</lst>
	</requestHandler>
-->
	<requestHandler name="/tag" class="org.opensextant.solrtexttagger.TaggerRequestHandler">
		<str name="field">name4matching</str>
		<bool name="matchText">false</bool>
		<str name="fq">name_bias:[0 TO *]</str>
		<lst name="defaults">
			<str name="echoParams">none</str>
			<str name="fl">place_id,name,cc</str>
		</lst>
	</requestHandler>



	<!-- A request handler that returns indented JSON by default -->
	<requestHandler name="/query" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="wt">json</str>
			<str name="indent">true</str>
			<str name="df">text</str>
		</lst>
	</requestHandler>


	<!-- realtime get handler, guaranteed to return the latest stored fields 
		of any document, without the need to commit or open a new searcher. The current 
		implementation relies on the updateLog feature being enabled. -->
	<requestHandler name="/get" class="solr.RealTimeGetHandler">
		<lst name="defaults">
			<str name="omitHeader">true</str>
			<str name="wt">json</str>
			<str name="indent">true</str>
		</lst>
	</requestHandler>





	<!-- Update Request Handler. http://wiki.apache.org/solr/UpdateXmlMessages 
		The canonical Request Handler for Modifying the Index through commands specified 
		using XML, JSON, CSV, or JAVABIN Note: Since solr1.1 requestHandlers requires 
		a valid content type header if posted in the body. For example, curl now 
		requires: -H 'Content-type:text/xml; charset=utf-8' To override the request 
		content type and force a specific Content-type, use the request parameter: 
		?update.contentType=text/csv This handler will pick a response format to 
		match the input if the 'wt' parameter is not explicit -->
	<requestHandler name="/update" class="solr.UpdateRequestHandler">
		<!-- See below for information on defining updateRequestProcessorChains 
			that can be used by name on each Update Request -->
	</requestHandler>


	<!-- Solr Cell Update Request Handler http://wiki.apache.org/solr/ExtractingRequestHandler -->
	<requestHandler name="/update/extract" startup="lazy"
		class="solr.extraction.ExtractingRequestHandler">
		<lst name="defaults">
			<str name="lowernames">true</str>
			<str name="uprefix">ignored_</str>

			<!-- capture link hrefs but ignore div attributes -->
			<str name="captureAttr">true</str>
			<str name="fmap.a">links</str>
			<str name="fmap.div">ignored_</str>
		</lst>
	</requestHandler>


	<!-- Field Analysis Request Handler RequestHandler that provides much the 
		same functionality as analysis.jsp. Provides the ability to specify multiple 
		field types and field names in the same request and outputs index-time and 
		query-time analysis for each of them. Request parameters are: analysis.fieldname 
		- field name whose analyzers are to be used analysis.fieldtype - field type 
		whose analyzers are to be used analysis.fieldvalue - text for index-time 
		analysis q (or analysis.q) - text for query time analysis analysis.showmatch 
		(true|false) - When set to true and when query analysis is performed, the 
		produced tokens of the field value analysis will be marked as "matched" for 
		every token that is produces by the query analysis -->
	<requestHandler name="/analysis/field" startup="lazy"
		class="solr.FieldAnalysisRequestHandler" />


	<!-- Document Analysis Handler http://wiki.apache.org/solr/AnalysisRequestHandler 
		An analysis handler that provides a breakdown of the analysis process of 
		provided documents. This handler expects a (single) content stream with the 
		following format: <docs> <doc> <field name="id">1</field> <field name="name">The 
		Name</field> <field name="text">The Text Value</field> </doc> <doc>...</doc> 
		<doc>...</doc> ... </docs> Note: Each document must contain a field which 
		serves as the unique key. This key is used in the returned response to associate 
		an analysis breakdown to the analyzed document. Like the FieldAnalysisRequestHandler, 
		this handler also supports query analysis by sending either an "analysis.query" 
		or "q" request parameter that holds the query text to be analyzed. It also 
		supports the "analysis.showmatch" parameter which when set to true, all field 
		tokens that match the query tokens will be marked as a "match". -->
	<requestHandler name="/analysis/document"
		class="solr.DocumentAnalysisRequestHandler" startup="lazy" />

	<!-- Admin Handlers Admin Handlers - This will register all the standard 
		admin RequestHandlers. -->
	<requestHandler name="/admin/" class="solr.admin.AdminHandlers" />
	<!-- This single handler is equivalent to the following... -->
	<!-- <requestHandler name="/admin/luke" class="solr.admin.LukeRequestHandler" 
		/> <requestHandler name="/admin/system" class="solr.admin.SystemInfoHandler" 
		/> <requestHandler name="/admin/plugins" class="solr.admin.PluginInfoHandler" 
		/> <requestHandler name="/admin/threads" class="solr.admin.ThreadDumpHandler" 
		/> <requestHandler name="/admin/properties" class="solr.admin.PropertiesRequestHandler" 
		/> <requestHandler name="/admin/file" class="solr.admin.ShowFileRequestHandler" 
		> -->
	<!-- If you wish to hide files under ${solr.home}/conf, explicitly register 
		the ShowFileRequestHandler using: -->
	<!-- <requestHandler name="/admin/file" class="solr.admin.ShowFileRequestHandler" 
		> <lst name="invariants"> <str name="hidden">synonyms.txt</str> <str name="hidden">anotherfile.txt</str> 
		</lst> </requestHandler> -->

	<!-- ping/healthcheck -->
	<requestHandler name="/admin/ping" class="solr.PingRequestHandler">
		<lst name="invariants">
			<str name="q">solrpingquery</str>
		</lst>
		<lst name="defaults">
			<str name="echoParams">all</str>
		</lst>
		<!-- An optional feature of the PingRequestHandler is to configure the 
			handler with a "healthcheckFile" which can be used to enable/disable the 
			PingRequestHandler. relative paths are resolved against the data dir -->
		<!-- <str name="healthcheckFile">server-enabled.txt</str> -->
	</requestHandler>

	<!-- Echo the request contents back to the client -->
	<requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="echoHandler">true</str>
		</lst>
	</requestHandler>

	<!-- Solr Replication The SolrReplicationHandler supports replicating indexes 
		from a "master" used for indexing and "slaves" used for queries. http://wiki.apache.org/solr/SolrReplication 
		In the example below, remove the <lst name="master"> section if this is just 
		a slave and remove the <lst name="slave"> section if this is just a master. -->
	<!-- <requestHandler name="/replication" class="solr.ReplicationHandler" 
		> <lst name="master"> <str name="replicateAfter">commit</str> <str name="replicateAfter">startup</str> 
		<str name="confFiles">schema.xml,stopwords.txt</str> </lst> <lst name="slave"> 
		<str name="masterUrl">http://localhost:8983/solr</str> <str name="pollInterval">00:00:60</str> 
		</lst> </requestHandler> -->

	<!-- Solr Replication for SolrCloud Recovery This is the config need for 
		SolrCloud's recovery replication. -->
	<requestHandler name="/replication" class="solr.ReplicationHandler"
		startup="lazy" />


	<!-- Search Components Search components are registered to SolrCore and 
		used by instances of SearchHandler (which can access them by name) By default, 
		the following components are available: <searchComponent name="query" class="solr.QueryComponent" 
		/> <searchComponent name="facet" class="solr.FacetComponent" /> <searchComponent 
		name="mlt" class="solr.MoreLikeThisComponent" /> <searchComponent name="highlight" 
		class="solr.HighlightComponent" /> <searchComponent name="stats" class="solr.StatsComponent" 
		/> <searchComponent name="debug" class="solr.DebugComponent" /> Default configuration 
		in a requestHandler would look like: <arr name="components"> <str>query</str> 
		<str>facet</str> <str>mlt</str> <str>highlight</str> <str>stats</str> <str>debug</str> 
		</arr> If you register a searchComponent to one of the standard names, that 
		will be used instead of the default. To insert components before or after 
		the 'standard' components, use: <arr name="first-components"> <str>myFirstComponentName</str> 
		</arr> <arr name="last-components"> <str>myLastComponentName</str> </arr> 
		NOTE: The component registered with the name "debug" will always be executed 
		after the "last-components" -->


	<!-- Script update processor This example hooks in an update processor implemented 
		using JavaScript. See more about the script update processor at http://wiki.apache.org/solr/ScriptUpdateProcessor -->
	<updateRequestProcessorChain name="script"
		default="true">
		<processor class="solr.StatelessScriptUpdateProcessorFactory">
			<str name="script">update-script.js</str>
			<!-- <lst name="params"> <str name="config_param">example config parameter</str> 
				</lst> -->
		</processor>
		<processor class="solr.RunUpdateProcessorFactory" />
	</updateRequestProcessorChain>

	<!-- Response Writers http://wiki.apache.org/solr/QueryResponseWriter Request 
		responses will be written using the writer specified by the 'wt' request 
		parameter matching the name of a registered writer. The "default" writer 
		is the default and will be used if 'wt' is not specified in the request. -->
	<!-- The following response writers are implicitly configured unless overridden... -->
	<!-- <queryResponseWriter name="xml" default="true" class="solr.XMLResponseWriter" 
		/> <queryResponseWriter name="json" class="solr.JSONResponseWriter"/> <queryResponseWriter 
		name="python" class="solr.PythonResponseWriter"/> <queryResponseWriter name="ruby" 
		class="solr.RubyResponseWriter"/> <queryResponseWriter name="php" class="solr.PHPResponseWriter"/> 
		<queryResponseWriter name="phps" class="solr.PHPSerializedResponseWriter"/> 
		<queryResponseWriter name="csv" class="solr.CSVResponseWriter"/> -->

	<queryResponseWriter name="json" class="solr.JSONResponseWriter">
		<!-- For the purposes of the tutorial, JSON responses are written as plain 
			text so that they are easy to read in *any* browser. If you expect a MIME 
			type of "application/json" just remove this override. -->
		<str name="content-type">text/plain; charset=UTF-8</str>
	</queryResponseWriter>

	<!-- Custom response writers can be declared as needed... -->
	<queryResponseWriter name="velocity"
		class="solr.VelocityResponseWriter" startup="lazy" />


	<!-- XSLT response writer transforms the XML output by any xslt file found 
		in Solr's conf/xslt directory. Changes to xslt files are checked for every 
		xsltCacheLifetimeSeconds. -->
	<queryResponseWriter name="xslt" class="solr.XSLTResponseWriter">
		<int name="xsltCacheLifetimeSeconds">5</int>
	</queryResponseWriter>

	<!-- Legacy config for the admin interface -->
	<admin>
		<defaultQuery>*:*</defaultQuery>
	</admin>

</config>
